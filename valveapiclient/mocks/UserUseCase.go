// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	share_code "github.com/Cludch/csgo-microservices/shared/pkg/share_code"
	user "github.com/Cludch/csgo-microservices/valveapiclient/internal/domain/user"
	mock "github.com/stretchr/testify/mock"
)

// UserUseCase is an autogenerated mock type for the UserUseCase type
type UserUseCase struct {
	mock.Mock
}

// AddSteamMatchHistoryAuthenticationCode provides a mock function with given fields: _a0, apiKey, authCode, sc
func (_m *UserUseCase) AddSteamMatchHistoryAuthenticationCode(_a0 *user.User, apiKey string, authCode string, sc string) error {
	ret := _m.Called(_a0, apiKey, authCode, sc)

	var r0 error
	if rf, ok := ret.Get(0).(func(*user.User, string, string, string) error); ok {
		r0 = rf(_a0, apiKey, authCode, sc)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateUser provides a mock function with given fields: id
func (_m *UserUseCase) CreateUser(id uint64) (*user.User, error) {
	ret := _m.Called(id)

	var r0 *user.User
	if rf, ok := ret.Get(0).(func(uint64) *user.User); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUser provides a mock function with given fields: _a0
func (_m *UserUseCase) GetUser(_a0 uint64) (*user.User, error) {
	ret := _m.Called(_a0)

	var r0 *user.User
	if rf, ok := ret.Get(0).(func(uint64) *user.User); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUsersWithApiEnabled provides a mock function with given fields:
func (_m *UserUseCase) GetUsersWithApiEnabled() ([]*user.User, error) {
	ret := _m.Called()

	var r0 []*user.User
	if rf, ok := ret.Get(0).(func() []*user.User); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*user.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QueryLatestShareCode provides a mock function with given fields: _a0
func (_m *UserUseCase) QueryLatestShareCode(_a0 *user.User) (*share_code.ShareCodeData, error) {
	ret := _m.Called(_a0)

	var r0 *share_code.ShareCodeData
	if rf, ok := ret.Get(0).(func(*user.User) *share_code.ShareCodeData); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*share_code.ShareCodeData)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*user.User) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateLatestShareCode provides a mock function with given fields: _a0, _a1
func (_m *UserUseCase) UpdateLatestShareCode(_a0 *user.User, _a1 *share_code.ShareCodeData) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*user.User, *share_code.ShareCodeData) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateSteamApiUsage provides a mock function with given fields: _a0, _a1
func (_m *UserUseCase) UpdateSteamApiUsage(_a0 *user.User, _a1 bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*user.User, bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

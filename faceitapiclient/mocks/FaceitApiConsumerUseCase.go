// Code generated by mockery v2.10.4. DO NOT EDIT.

package mocks

import (
	faceit_api "github.com/Cludch/csgo-microservices/faceitapiclient/pkg/faceit_api"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// FaceitApiConsumerUseCase is an autogenerated mock type for the FaceitApiConsumerUseCase type
type FaceitApiConsumerUseCase struct {
	mock.Mock
}

// GetMatchDetails provides a mock function with given fields: faceitAPIKey, matchID
func (_m *FaceitApiConsumerUseCase) GetMatchDetails(faceitAPIKey string, matchID string) (*faceit_api.MatchDetailsResponse, error) {
	ret := _m.Called(faceitAPIKey, matchID)

	var r0 *faceit_api.MatchDetailsResponse
	if rf, ok := ret.Get(0).(func(string, string) *faceit_api.MatchDetailsResponse); ok {
		r0 = rf(faceitAPIKey, matchID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*faceit_api.MatchDetailsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(faceitAPIKey, matchID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPlayerMatchHistory provides a mock function with given fields: faceitAPIKey, playerID
func (_m *FaceitApiConsumerUseCase) GetPlayerMatchHistory(faceitAPIKey string, playerID uuid.UUID) (*faceit_api.PlayerMatchHistoryResponse, error) {
	ret := _m.Called(faceitAPIKey, playerID)

	var r0 *faceit_api.PlayerMatchHistoryResponse
	if rf, ok := ret.Get(0).(func(string, uuid.UUID) *faceit_api.PlayerMatchHistoryResponse); ok {
		r0 = rf(faceitAPIKey, playerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*faceit_api.PlayerMatchHistoryResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, uuid.UUID) error); ok {
		r1 = rf(faceitAPIKey, playerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

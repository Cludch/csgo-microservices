// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	amqp "github.com/streadway/amqp"
	mock "github.com/stretchr/testify/mock"
)

// QueueUseCase is an autogenerated mock type for the QueueUseCase type
type QueueUseCase struct {
	mock.Mock
}

// Connect provides a mock function with given fields: amqpURI
func (_m *QueueUseCase) Connect(amqpURI string) error {
	ret := _m.Called(amqpURI)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(amqpURI)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Consume provides a mock function with given fields: topic
func (_m *QueueUseCase) Consume(topic string) (<-chan amqp.Delivery, error) {
	ret := _m.Called(topic)

	var r0 <-chan amqp.Delivery
	if rf, ok := ret.Get(0).(func(string) <-chan amqp.Delivery); ok {
		r0 = rf(topic)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan amqp.Delivery)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(topic)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateQueue provides a mock function with given fields: topic
func (_m *QueueUseCase) CreateQueue(topic string) error {
	ret := _m.Called(topic)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(topic)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Publish provides a mock function with given fields: body, topic
func (_m *QueueUseCase) Publish(body []byte, topic string) error {
	ret := _m.Called(body, topic)

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte, string) error); ok {
		r0 = rf(body, topic)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

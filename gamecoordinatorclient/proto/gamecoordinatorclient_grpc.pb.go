// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package gamecoordinatorclient

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MatchDetailQueryServiceClient is the client API for MatchDetailQueryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MatchDetailQueryServiceClient interface {
	GetMatchDetails(ctx context.Context, in *MatchDetailsRequest, opts ...grpc.CallOption) (*MatchDetailsResponse, error)
}

type matchDetailQueryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMatchDetailQueryServiceClient(cc grpc.ClientConnInterface) MatchDetailQueryServiceClient {
	return &matchDetailQueryServiceClient{cc}
}

func (c *matchDetailQueryServiceClient) GetMatchDetails(ctx context.Context, in *MatchDetailsRequest, opts ...grpc.CallOption) (*MatchDetailsResponse, error) {
	out := new(MatchDetailsResponse)
	err := c.cc.Invoke(ctx, "/gamecoordinatorclient.MatchDetailQueryService/GetMatchDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MatchDetailQueryServiceServer is the server API for MatchDetailQueryService service.
// All implementations should embed UnimplementedMatchDetailQueryServiceServer
// for forward compatibility
type MatchDetailQueryServiceServer interface {
	GetMatchDetails(context.Context, *MatchDetailsRequest) (*MatchDetailsResponse, error)
}

// UnimplementedMatchDetailQueryServiceServer should be embedded to have forward compatible implementations.
type UnimplementedMatchDetailQueryServiceServer struct {
}

func (UnimplementedMatchDetailQueryServiceServer) GetMatchDetails(context.Context, *MatchDetailsRequest) (*MatchDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMatchDetails not implemented")
}

// UnsafeMatchDetailQueryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MatchDetailQueryServiceServer will
// result in compilation errors.
type UnsafeMatchDetailQueryServiceServer interface {
	mustEmbedUnimplementedMatchDetailQueryServiceServer()
}

func RegisterMatchDetailQueryServiceServer(s grpc.ServiceRegistrar, srv MatchDetailQueryServiceServer) {
	s.RegisterService(&MatchDetailQueryService_ServiceDesc, srv)
}

func _MatchDetailQueryService_GetMatchDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MatchDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchDetailQueryServiceServer).GetMatchDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gamecoordinatorclient.MatchDetailQueryService/GetMatchDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchDetailQueryServiceServer).GetMatchDetails(ctx, req.(*MatchDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MatchDetailQueryService_ServiceDesc is the grpc.ServiceDesc for MatchDetailQueryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MatchDetailQueryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gamecoordinatorclient.MatchDetailQueryService",
	HandlerType: (*MatchDetailQueryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMatchDetails",
			Handler:    _MatchDetailQueryService_GetMatchDetails_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/gamecoordinatorclient.proto",
}

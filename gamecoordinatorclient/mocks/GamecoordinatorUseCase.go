// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	gamecoordinator "github.com/Cludch/csgo-microservices/gamecoordinatorclient/internal/gamecoordinator"
	mock "github.com/stretchr/testify/mock"

	protocolgamecoordinator "github.com/Philipp15b/go-steam/v3/protocol/gamecoordinator"

	share_code "github.com/Cludch/csgo-microservices/shared/pkg/share_code"

	sync "sync"
)

// GamecoordinatorUseCase is an autogenerated mock type for the GamecoordinatorUseCase type
type GamecoordinatorUseCase struct {
	mock.Mock
}

// Connect provides a mock function with given fields: username, password, twoFactorSecret, done
func (_m *GamecoordinatorUseCase) Connect(username string, password string, twoFactorSecret string, done sync.WaitGroup) {
	_m.Called(username, password, twoFactorSecret, done)
}

// HandleGCPacket provides a mock function with given fields: packet
func (_m *GamecoordinatorUseCase) HandleGCPacket(packet *protocolgamecoordinator.GCPacket) {
	_m.Called(packet)
}

// RequestMatchDetails provides a mock function with given fields: _a0
func (_m *GamecoordinatorUseCase) RequestMatchDetails(_a0 *share_code.ShareCodeData) chan *gamecoordinator.MatchDetails {
	ret := _m.Called(_a0)

	var r0 chan *gamecoordinator.MatchDetails
	if rf, ok := ret.Get(0).(func(*share_code.ShareCodeData) chan *gamecoordinator.MatchDetails); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan *gamecoordinator.MatchDetails)
		}
	}

	return r0
}

// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	player "github.com/Cludch/csgo-microservices/demoparser/internal/domain/player"
	uuid "github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// AddResult provides a mock function with given fields: _a0, _a1
func (_m *Repository) AddResult(_a0 *player.Player, _a1 *player.PlayerResult) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*player.Player, *player.PlayerResult) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Create provides a mock function with given fields: _a0
func (_m *Repository) Create(_a0 *player.Player) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*player.Player) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteResult provides a mock function with given fields: _a0, _a1
func (_m *Repository) DeleteResult(_a0 *player.Player, _a1 uuid.UUID) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*player.Player, uuid.UUID) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Find provides a mock function with given fields: _a0
func (_m *Repository) Find(_a0 uint64) (*player.Player, error) {
	ret := _m.Called(_a0)

	var r0 *player.Player
	if rf, ok := ret.Get(0).(func(uint64) *player.Player); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*player.Player)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields:
func (_m *Repository) List() ([]*player.Player, error) {
	ret := _m.Called()

	var r0 []*player.Player
	if rf, ok := ret.Get(0).(func() []*player.Player); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*player.Player)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
